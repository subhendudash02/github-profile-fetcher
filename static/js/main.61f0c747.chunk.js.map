{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","a","b","$","submit","e","preventDefault","loadUsers","document","getElementById","value","username","fetch","apiLink","json","jsonFetch","Array","Fragment","className","id","name","placeholder","autoComplete","type","onClick","map","avatar_url","followers","following","bio","location","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wSAwEeA,MAnEf,WAEI,MAAeC,mBAAS,IAAxB,mBAAOC,EAAP,KAAUC,EAAV,KAUAC,KAAE,WACEA,IAAE,QAAQC,QAAO,SAASC,GACtBA,EAAEC,uBAYV,IAAMC,EAAS,uCAAG,gCAAAN,EAAA,sEACOO,SAASC,eAAe,YAAYC,MAD3C,cACVC,EADU,gBAEQC,MApBf,gCAoB4BD,GAFrB,cAERE,EAFQ,gBAGQA,EAAQC,OAHhB,OAGVC,EAHU,OAIdA,EAAYC,MAAMD,GAClBb,EAAEa,GALY,4CAAH,qDAQf,OACI,eAAC,IAAME,SAAP,WACI,oBAAIC,UAAU,eAAd,oCACA,uBAEA,iCACI,uBAAOC,GAAG,WAAWC,KAAK,OAAOC,YAAY,mBAAmBC,aAAa,QAAc,uBAC3F,uBAAOC,KAAK,SAASb,MAAM,cAAcc,QAASjB,EAAWY,GAAG,oBAGpE,8BACKlB,EAAEwB,KAAI,YAA4D,IAA1DL,EAAyD,EAAzDA,KAAMM,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,SAClD,OACI,sBAAKZ,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SACI,qBAAKa,IAAKL,EAAYM,IAAI,oBAE9B,sBAAKd,UAAU,SAAf,UACI,6BAAKE,IACL,8BAAG,iDAA6BO,EAAhC,WAAkD,iDAA6BC,KAC/E,8BAAG,cAAC,IAAD,CAAgBV,UAAY,UAA/B,IAA2CY,KAC3C,4BAAID,eAOxB,2BCvDGI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,M","file":"static/js/main.61f0c747.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport './App.css';\nimport $ from \"jquery\";\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\n\nfunction App() {\n\n    const [a, b] = useState([]);\n    // const [c, d] = useState([]);\n    // const githubUsername = func => {\n    //     d(func.target.value);\n    // };\n\n    let link = \"https://api.github.com/users/\";\n    // let name = \"\";\n    // let username = \"\";\n\n    $(function () {\n        $(\"form\").submit(function(e) {\n            e.preventDefault();\n            // username = $(\"#username\").val();\n            // fetch(link + username)\n            // .then(res => res.json())\n            // .then(json => {\n            //     name = json.name;\n            //     console.log(name);\n            // });\n            // return false;\n        });\n    });\n\n    const loadUsers = async () => {\n        let username = await document.getElementById(\"username\").value;\n        const apiLink = await fetch(link + username);\n        let jsonFetch = await apiLink.json();\n        jsonFetch = Array(jsonFetch);\n        b(jsonFetch);\n    };\n\n    return (\n        <React.Fragment>\n            <h1 className=\"main-heading\">GitHub Profile Fetcher</h1>\n            <br />\n\n            <form>\n                <input id=\"username\" name=\"name\" placeholder=\"@github-username\" autoComplete=\"off\"></input><br />\n                <input type=\"submit\" value=\"Get My Card\" onClick={loadUsers} id=\"fetch-button\"></input>\n            </form>\n\n            <div>\n                {a.map(({name, avatar_url, followers, following, bio, location})=>{\n                    return (\n                        <div className=\"card\">\n                            <div className=\"first\">\n                                <img src={avatar_url} alt=\"github-avatar\"></img>\n                            </div>\n                            <div className=\"second\">\n                                <h1>{name}</h1>\n                                <p><strong>Followers: </strong>{followers} &emsp; <strong>Following: </strong>{following}</p>\n                                <p><FaMapMarkerAlt className = \"icons\" /> {location}</p>\n                                <p>{bio}</p>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n\n            <br />\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}